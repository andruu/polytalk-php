!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Buffer	vendor/react/stream/React/Stream/Buffer.php	/^class Buffer extends EventEmitter implements WritableStreamInterface$/;"	c
ClassLoader	vendor/composer/ClassLoader.php	/^class ClassLoader$/;"	c
Client	lib/Polytalk/Client.php	/^class Client {$/;"	c
ComposerAutoloaderInitf9aa8ae7b0df116d7dcc31ef77222182	vendor/composer/autoload_real.php	/^class ComposerAutoloaderInitf9aa8ae7b0df116d7dcc31ef77222182$/;"	c
Connection	vendor/react/socket/React/Socket/Connection.php	/^class Connection extends Stream implements ConnectionInterface$/;"	c
ConnectionException	vendor/react/socket/React/Socket/ConnectionException.php	/^class ConnectionException extends \\ErrorException$/;"	c
ConnectionInterface	vendor/react/socket/React/Socket/ConnectionInterface.php	/^interface ConnectionInterface extends ReadableStreamInterface, WritableStreamInterface$/;"	i
EventEmitter	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^class EventEmitter implements EventEmitterInterface$/;"	c
EventEmitter2	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^class EventEmitter2 extends EventEmitter$/;"	c
EventEmitter2Test	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^class EventEmitter2Test extends \\PHPUnit_Framework_TestCase$/;"	c
EventEmitterInterface	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^interface EventEmitterInterface$/;"	i
EventEmitterTest	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^class EventEmitterTest extends \\PHPUnit_Framework_TestCase$/;"	c
Factory	vendor/react/event-loop/React/EventLoop/Factory.php	/^class Factory$/;"	c
LibEvLoop	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^class LibEvLoop implements LoopInterface$/;"	c
LibEventLoop	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^class LibEventLoop implements LoopInterface$/;"	c
Listener	vendor/evenement/evenement/tests/Evenement/Tests/Listener.php	/^class Listener$/;"	c
LoopInterface	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^interface LoopInterface$/;"	i
Order	examples/Model/Order.php	/^class Order {$/;"	c
ReadableStreamInterface	vendor/react/stream/React/Stream/ReadableStreamInterface.php	/^interface ReadableStreamInterface extends StreamInterface$/;"	i
Request	lib/Polytalk/Request.php	/^class Request {$/;"	c
Response	lib/Polytalk/Response.php	/^class Response {$/;"	c
Server	lib/Polytalk/Server.php	/^class Server {$/;"	c
Server	vendor/react/socket/React/Socket/Server.php	/^class Server extends EventEmitter implements ServerInterface$/;"	c
ServerInterface	vendor/react/socket/React/Socket/ServerInterface.php	/^interface ServerInterface extends EventEmitterInterface$/;"	i
Stream	vendor/react/stream/React/Stream/Stream.php	/^class Stream extends EventEmitter implements ReadableStreamInterface, WritableStreamInterface$/;"	c
StreamInterface	vendor/react/stream/React/Stream/StreamInterface.php	/^interface StreamInterface extends EventEmitterInterface$/;"	i
StreamSelectLoop	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^class StreamSelectLoop implements LoopInterface$/;"	c
Timers	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^class Timers$/;"	c
Util	vendor/react/stream/React/Stream/Util.php	/^class Util$/;"	c
WritableStreamInterface	vendor/react/stream/React/Stream/WritableStreamInterface.php	/^interface WritableStreamInterface extends StreamInterface$/;"	i
__construct	lib/Polytalk/Client.php	/^  public function __construct ($config = []) {$/;"	f
__construct	lib/Polytalk/Request.php	/^  public function __construct ($request) {$/;"	f
__construct	lib/Polytalk/Response.php	/^  public function __construct ($response) {$/;"	f
__construct	lib/Polytalk/Server.php	/^  public function __construct ($config = []) {$/;"	f
__construct	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function __construct(array $options = array())$/;"	f
__construct	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function __construct()$/;"	f
__construct	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function __construct()$/;"	f
__construct	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function __construct()$/;"	f
__construct	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    public function __construct(LoopInterface $loop)$/;"	f
__construct	vendor/react/socket/React/Socket/Server.php	/^    public function __construct(LoopInterface $loop)$/;"	f
__construct	vendor/react/stream/React/Stream/Buffer.php	/^    public function __construct($stream, LoopInterface $loop)$/;"	f
__construct	vendor/react/stream/React/Stream/Stream.php	/^    public function __construct($stream, LoopInterface $loop)$/;"	f
active	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    private $active = array();$/;"	v
add	vendor/composer/ClassLoader.php	/^    public function add($prefix, $paths)$/;"	f
add	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    public function add($interval, $callback, $periodic = false)$/;"	f
addClassMap	vendor/composer/ClassLoader.php	/^    public function addClassMap(array $classMap)$/;"	f
addPeriodicTimer	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function addPeriodicTimer($interval, $callback)$/;"	f
addPeriodicTimer	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function addPeriodicTimer($interval, $callback)$/;"	f
addPeriodicTimer	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function addPeriodicTimer($interval, $callback);$/;"	f
addPeriodicTimer	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function addPeriodicTimer($interval, $callback)$/;"	f
addReadStream	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function addReadStream($stream, $listener)$/;"	f
addReadStream	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function addReadStream($stream, $listener)$/;"	f
addReadStream	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function addReadStream($stream, $listener);$/;"	f
addReadStream	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function addReadStream($stream, $listener)$/;"	f
addStream	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    private function addStream($stream, $listener, $flags)$/;"	f
addStreamEvent	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    protected function addStreamEvent($stream, $eventClass, $type, $listener)$/;"	f
addTimer	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function addTimer($interval, $callback)$/;"	f
addTimer	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function addTimer($interval, $callback)$/;"	f
addTimer	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function addTimer($interval, $callback);$/;"	f
addTimer	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function addTimer($interval, $callback)$/;"	f
addTimerInternal	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    protected function addTimerInternal($interval, $callback, $periodic = false)$/;"	f
addWriteStream	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function addWriteStream($stream, $listener)$/;"	f
addWriteStream	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function addWriteStream($stream, $listener)$/;"	f
addWriteStream	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function addWriteStream($stream, $listener);$/;"	f
addWriteStream	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function addWriteStream($stream, $listener)$/;"	f
anyListeners	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    protected $anyListeners = array();$/;"	v
arguments	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function emit($event, array $arguments = array())$/;"	v
arguments	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function emit($event, array $arguments = array())$/;"	v
arguments	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function emit($event, array $arguments = array());$/;"	v
base	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^        $this->base = event_base_new();$/;"	v
base	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    private $base;$/;"	v
baseDir	vendor/composer/autoload_classmap.php	/^$baseDir = dirname($vendorDir);$/;"	v
baseDir	vendor/composer/autoload_namespaces.php	/^$baseDir = dirname($vendorDir);$/;"	v
baseDir	vendor/composer/autoload_real.php	/^        $baseDir = dirname($vendorDir);$/;"	v
belowSoftLimit	vendor/react/stream/React/Stream/Buffer.php	/^        $belowSoftLimit = strlen($this->data) < $this->softLimit;$/;"	v
buffer	vendor/react/stream/React/Stream/Stream.php	/^        $this->buffer = new Buffer($this->stream, $this->loop);$/;"	v
buffer	vendor/react/stream/React/Stream/Stream.php	/^    protected $buffer;$/;"	v
bufferSize	vendor/react/stream/React/Stream/Stream.php	/^    public $bufferSize = 4096;$/;"	v
call	lib/Polytalk/Client.php	/^  public function call ($request, $callback = null) {$/;"	f
call	lib/Polytalk/Server.php	/^  public function call ($request) {$/;"	f
callback	lib/Polytalk/Client.php	/^  public function call ($request, $callback = null) {$/;"	v
callback	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $callback = $this->wrapTimerCallback($signature, $callback, $periodic);$/;"	v
callback	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^        $callback = function () use ($timer) {$/;"	v
callback	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^        $this->callback = $this->createLibeventCallback();$/;"	v
callback	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    private $callback;$/;"	v
can	vendor/react/stream/React/Stream/StreamInterface.php	/^\/\/ In PHP <= 5.3.8 a class can not implement 2 interfaces with coincidental matching methods$/;"	c
cancel	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    public function cancel($signature)$/;"	f
cancelTimer	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function cancelTimer($signature)$/;"	f
cancelTimer	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function cancelTimer($signature)$/;"	f
cancelTimer	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function cancelTimer($signature);$/;"	f
cancelTimer	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function cancelTimer($signature)$/;"	f
class	vendor/composer/ClassLoader.php	/^            $class = substr($class, 1);$/;"	v
classMap	vendor/composer/ClassLoader.php	/^            $this->classMap = $classMap;$/;"	v
classMap	vendor/composer/ClassLoader.php	/^            $this->classMap = array_merge($this->classMap, $classMap);$/;"	v
classMap	vendor/composer/ClassLoader.php	/^    private $classMap = array();$/;"	v
classMap	vendor/composer/autoload_real.php	/^        $classMap = require __DIR__ . '\/autoload_classmap.php';$/;"	v
className	vendor/composer/ClassLoader.php	/^            $className = $class;$/;"	v
className	vendor/composer/ClassLoader.php	/^            $className = substr($class, $pos + 1);$/;"	v
classPath	vendor/composer/ClassLoader.php	/^            $classPath = null;$/;"	v
classPath	vendor/composer/ClassLoader.php	/^            $classPath = str_replace('\\\\', DIRECTORY_SEPARATOR, substr($class, 0, $pos)) . DIRECTORY_SEPARATOR;$/;"	v
client	examples/client.php	/^$client  = new PolyTalk\\Client(['port' => 9090]);$/;"	v
client	lib/Polytalk/Client.php	/^    $this->client     = stream_socket_client("tcp:\/\/{$this->host}:{$this->port}");$/;"	v
client	lib/Polytalk/Client.php	/^  private $client;$/;"	v
client	vendor/react/socket/React/Socket/Server.php	/^        $client = $this->createConnection($socket);$/;"	v
close	vendor/react/stream/React/Stream/Buffer.php	/^    public function close()$/;"	f
close	vendor/react/stream/React/Stream/Stream.php	/^    public function close()$/;"	f
close	vendor/react/stream/React/Stream/StreamInterface.php	/^    public function close();$/;"	f
closing	vendor/react/stream/React/Stream/Stream.php	/^        $this->closing = false;$/;"	v
closing	vendor/react/stream/React/Stream/Stream.php	/^        $this->closing = true;$/;"	v
closing	vendor/react/stream/React/Stream/Stream.php	/^    protected $closing = false;$/;"	v
connection	lib/Polytalk/Client.php	/^    $this->connection = new \\React\\Socket\\Connection($this->client, $this->loop);$/;"	v
connection	lib/Polytalk/Client.php	/^  private $connection;$/;"	v
create	vendor/react/event-loop/React/EventLoop/Factory.php	/^    public static function create()$/;"	f
createConnection	vendor/react/socket/React/Socket/Server.php	/^    public function createConnection($socket)$/;"	f
createLibeventCallback	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    protected function createLibeventCallback()$/;"	f
createTimer	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    private function createTimer($timer, $callback, $periodic)$/;"	f
currentTime	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^        $currentTime = microtime(true);$/;"	v
data	vendor/react/socket/React/Socket/Connection.php	/^        $data = stream_socket_recvfrom($stream, $this->bufferSize);$/;"	v
data	vendor/react/stream/React/Stream/Buffer.php	/^        $this->data = '';$/;"	v
data	vendor/react/stream/React/Stream/Buffer.php	/^        $this->data = (string) substr($this->data, $sent);$/;"	v
data	vendor/react/stream/React/Stream/Buffer.php	/^    private $data = '';$/;"	v
data	vendor/react/stream/React/Stream/Stream.php	/^        $data = fread($stream, $this->bufferSize);$/;"	v
dummyCallback	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $dummyCallback = function () {};$/;"	v
emit	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function emit($event, array $arguments = array())$/;"	f
emit	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function emit($event, array $arguments = array())$/;"	f
emit	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function emit($event, array $arguments = array());$/;"	f
emitter	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^        $this->emitter = new EventEmitter2();$/;"	v
emitter	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    private $emitter;$/;"	v
emitter	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $this->emitter = new EventEmitter();$/;"	v
emitter	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    private $emitter;$/;"	v
end	vendor/react/stream/React/Stream/Buffer.php	/^    public function end($data = null)$/;"	f
end	vendor/react/stream/React/Stream/Stream.php	/^    public function end($data = null)$/;"	f
end	vendor/react/stream/React/Stream/Util.php	/^        $end = isset($options['end']) ? $options['end'] : true;$/;"	v
end	vendor/react/stream/React/Stream/WritableStreamInterface.php	/^    public function end($data = null);$/;"	f
errorHandler	vendor/react/stream/React/Stream/Buffer.php	/^    private function errorHandler($errno, $errstr, $errfile, $errline)$/;"	f
event	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $event = new \\libev\\IOEvent($listener, $stream, $flags);$/;"	v
event	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^            $event = $this->events[$id];$/;"	v
event	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^            $event = event_new();$/;"	v
events	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    private $events = array();$/;"	v
except	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^        $except = null;$/;"	v
exists	vendor/react/stream/React/Stream/StreamInterface.php	/^\/\/ This class exists because ReadableStreamInterface and WritableStreamInterface$/;"	c
fallbackDirs	vendor/composer/ClassLoader.php	/^    private $fallbackDirs = array();$/;"	v
feedMore	vendor/react/stream/React/Stream/Util.php	/^            $feedMore = $dest->write($data);$/;"	v
file	vendor/composer/ClassLoader.php	/^        if ($this->useIncludePath && $file = stream_resolve_include_path($classPath)) {$/;"	v
files	vendor/composer/ClassLoader.php	/^     * Turns on searching the include path for class files.$/;"	c
findBySize	examples/Model/Order.php	/^  public static function findBySize ($size, $limit) {$/;"	f
findFile	vendor/composer/ClassLoader.php	/^    public function findFile($class)$/;"	f
first_order	examples/client.php	/^\/\/ $first_order = $client->call($request, function ($response) {$/;"	v
flags	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^            $flags = $this->flags[$id] & ~$eventClass;$/;"	v
flags	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^        $flags = isset($this->flags[$id]) ? $this->flags[$id] | $eventClass : $eventClass;$/;"	v
flags	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    private $flags = array();$/;"	v
getBuffer	vendor/react/stream/React/Stream/Stream.php	/^    public function getBuffer()$/;"	f
getClassMap	vendor/composer/ClassLoader.php	/^    public function getClassMap()$/;"	f
getFallbackDirs	vendor/composer/ClassLoader.php	/^    public function getFallbackDirs()$/;"	f
getFirst	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    public function getFirst()$/;"	f
getLoader	vendor/composer/autoload_real.php	/^    public static function getLoader()$/;"	f
getNextEventTimeInMicroSeconds	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    protected function getNextEventTimeInMicroSeconds()$/;"	f
getPort	vendor/react/socket/React/Socket/Server.php	/^    public function getPort()$/;"	f
getPort	vendor/react/socket/React/Socket/ServerInterface.php	/^    public function getPort();$/;"	f
getPrefixes	vendor/composer/ClassLoader.php	/^    public function getPrefixes()$/;"	f
getRemoteAddress	vendor/react/socket/React/Socket/Connection.php	/^    public function getRemoteAddress()$/;"	f
getRemoteAddress	vendor/react/socket/React/Socket/ConnectionInterface.php	/^    public function getRemoteAddress();$/;"	f
getResponse	lib/Polytalk/Client.php	/^  public function getResponse () {$/;"	f
getTime	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    public function getTime()$/;"	f
getUseIncludePath	vendor/composer/ClassLoader.php	/^    public function getUseIncludePath()$/;"	f
handleClose	vendor/react/socket/React/Socket/Connection.php	/^    public function handleClose()$/;"	f
handleClose	vendor/react/stream/React/Stream/Stream.php	/^    public function handleClose()$/;"	f
handleConnection	vendor/react/socket/React/Socket/Server.php	/^    public function handleConnection($socket)$/;"	f
handleData	vendor/react/socket/React/Socket/Connection.php	/^    public function handleData($stream)$/;"	f
handleData	vendor/react/stream/React/Stream/Stream.php	/^    public function handleData($stream)$/;"	f
handleWrite	vendor/react/stream/React/Stream/Buffer.php	/^    public function handleWrite()$/;"	f
host	lib/Polytalk/Client.php	/^      $this->host = $config['host'];$/;"	v
host	lib/Polytalk/Client.php	/^  private $host = '127.0.0.1';$/;"	v
host	lib/Polytalk/Server.php	/^      $this->host = $config['host'];$/;"	v
host	lib/Polytalk/Server.php	/^  private $host = '127.0.0.1';$/;"	v
host	vendor/react/socket/React/Socket/Server.php	/^    public function listen($port, $host = '127.0.0.1')$/;"	v
host	vendor/react/socket/React/Socket/ServerInterface.php	/^    public function listen($port, $host = '127.0.0.1');$/;"	v
id	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^            $id = (int) $stream;$/;"	v
id	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^        $id = (int) $stream;$/;"	v
id	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^        $id = (int) $stream;$/;"	v
in	vendor/composer/ClassLoader.php	/^ * In this example, if you try to use a class in the Symfony\\Component$/;"	c
index	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^            if (false !== $index = array_search($listener, $this->listeners[$event], true)) {$/;"	v
index	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        if (false !== $index = array_search($listener, $this->anyListeners, true)) {$/;"	v
interval	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^        $interval = (float) $interval;$/;"	v
is	vendor/composer/ClassLoader.php	/^     * Finds the path to the file where the class is defined.$/;"	c
is	vendor/composer/ClassLoader.php	/^ * This class is loosely based on the Symfony UniversalClassLoader.$/;"	c
isEmpty	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    public function isEmpty()$/;"	f
isReadable	vendor/react/stream/React/Stream/ReadableStreamInterface.php	/^    public function isReadable();$/;"	f
isReadable	vendor/react/stream/React/Stream/Stream.php	/^    public function isReadable()$/;"	f
isWritable	vendor/react/stream/React/Stream/Buffer.php	/^    public function isWritable()$/;"	f
isWritable	vendor/react/stream/React/Stream/Stream.php	/^    public function isWritable()$/;"	f
isWritable	vendor/react/stream/React/Stream/WritableStreamInterface.php	/^    public function isWritable();$/;"	f
lastError	vendor/react/stream/React/Stream/Buffer.php	/^    private $lastError = array($/;"	v
len	vendor/react/stream/React/Stream/Buffer.php	/^        $len = strlen($this->data);$/;"	v
listen	vendor/react/socket/React/Socket/Server.php	/^    public function listen($port, $host = '127.0.0.1')$/;"	f
listen	vendor/react/socket/React/Socket/ServerInterface.php	/^    public function listen($port, $host = '127.0.0.1');$/;"	f
listener	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^        $listener = function () use (&$listenerCalled) {$/;"	v
listener	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listener = function () use (&$listenersCalled) {$/;"	v
listener	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listener = new Listener();$/;"	v
listener	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $listener = $this->wrapStreamListener($stream, $listener, $flags);$/;"	v
listener	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^                    $listener = $this->readListeners[(int) $stream];$/;"	v
listener	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^                    $listener = $this->writeListeners[(int) $stream];$/;"	v
listenerCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^        $listenerCalled = 0;$/;"	v
listenerCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^            $listenerCalled = true;$/;"	v
listenerCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listenerCalled = 0;$/;"	v
listenerCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listenerCalled = false;$/;"	v
listeners	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^            $this->listeners = array();$/;"	v
listeners	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    protected $listeners = array();$/;"	v
listeners	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function listeners($event)$/;"	f
listeners	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function listeners($event)$/;"	f
listeners	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function listeners($event);$/;"	f
listenersCalled	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $listenersCalled = 0;$/;"	v
listening	vendor/react/stream/React/Stream/Buffer.php	/^            $this->listening = false;$/;"	v
listening	vendor/react/stream/React/Stream/Buffer.php	/^            $this->listening = true;$/;"	v
listening	vendor/react/stream/React/Stream/Buffer.php	/^        $this->listening = false;$/;"	v
listening	vendor/react/stream/React/Stream/Buffer.php	/^    public $listening = false;$/;"	v
loadClass	vendor/composer/ClassLoader.php	/^    public function loadClass($class)$/;"	f
loadClassLoader	vendor/composer/autoload_real.php	/^    public static function loadClassLoader($class)$/;"	f
loader	vendor/composer/ClassLoader.php	/^ *     $loader = new \\Composer\\Autoload\\ClassLoader();$/;"	v
loader	vendor/composer/ClassLoader.php	/^ * ClassLoader implements a PSR-0 class loader$/;"	c
loader	vendor/composer/autoload_real.php	/^        static::$loader = $loader = new \\Composer\\Autoload\\ClassLoader();$/;"	v
loader	vendor/composer/autoload_real.php	/^    private static $loader;$/;"	v
loader	vendor/evenement/evenement/tests/bootstrap.php	/^$loader = require __DIR__.'\/..\/vendor\/autoload.php';$/;"	v
loop	lib/Polytalk/Client.php	/^    $this->loop       = \\React\\EventLoop\\Factory::create();$/;"	v
loop	lib/Polytalk/Client.php	/^  private $loop;$/;"	v
loop	lib/Polytalk/Server.php	/^    $this->loop   = \\React\\EventLoop\\Factory::create();$/;"	v
loop	lib/Polytalk/Server.php	/^  private $loop;$/;"	v
loop	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $loop = $this;$/;"	v
loop	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $this->loop = new \\libev\\EventLoop();$/;"	v
loop	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    private $loop;$/;"	v
loop	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    private $loop;$/;"	v
loop	vendor/react/socket/React/Socket/Server.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/socket/React/Socket/Server.php	/^    private $loop;$/;"	v
loop	vendor/react/stream/React/Stream/Buffer.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/stream/React/Stream/Buffer.php	/^    private $loop;$/;"	v
loop	vendor/react/stream/React/Stream/Stream.php	/^        $this->loop = $loop;$/;"	v
loop	vendor/react/stream/React/Stream/Stream.php	/^    protected $loop;$/;"	v
many	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function many($event, $timesToListen, $listener)$/;"	f
manyListener	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $manyListener = function () use ($that, &$timesListened, &$manyListener, $event, $timesToListen, $listener) {$/;"	v
map	vendor/composer/autoload_real.php	/^        $map = require __DIR__ . '\/autoload_namespaces.php';$/;"	v
master	vendor/react/socket/React/Socket/Server.php	/^        $this->master = @stream_socket_server("tcp:\/\/$host:$port", $errno, $errstr);$/;"	v
master	vendor/react/socket/React/Socket/Server.php	/^    public $master;$/;"	v
matchEventName	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    protected function matchEventName($matchPattern, $eventName)$/;"	f
matchedListeners	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $matchedListeners = array();$/;"	v
message	vendor/react/socket/React/Socket/Server.php	/^            $message = "Could not bind to tcp:\/\/$host:$port: $errstr";$/;"	v
name	vendor/composer/ClassLoader.php	/^            \/\/ PEAR-like class name$/;"	c
name	vendor/composer/ClassLoader.php	/^            \/\/ namespaced class name$/;"	c
name	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        foreach ($this->listeners as $name => $listeners) {$/;"	v
name	vendor/react/socket/React/Socket/Server.php	/^        $name = stream_socket_get_name($this->master, false);$/;"	v
namePart	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^            $namePart = $nameParts[$i];$/;"	v
nameParts	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $nameParts = explode($this->options['delimiter'], $eventName);$/;"	v
namespace	vendor/composer/autoload_real.php	/^        foreach ($map as $namespace => $path) {$/;"	v
newSocket	vendor/react/socket/React/Socket/Server.php	/^            $newSocket = stream_socket_accept($master);$/;"	v
nextEvent	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^        $nextEvent = $this->timers->getFirst();$/;"	v
offAny	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function offAny($listener)$/;"	f
on	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function on($event, $listener)$/;"	f
on	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function on($event, $listener);$/;"	f
onAny	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function onAny($listener)$/;"	f
onBar	vendor/evenement/evenement/tests/Evenement/Tests/Listener.php	/^    public static function onBar()$/;"	f
onFoo	vendor/evenement/evenement/tests/Evenement/Tests/Listener.php	/^    public function onFoo()$/;"	f
once	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function once($event, $listener)$/;"	f
once	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function once($event, $listener);$/;"	f
onceListener	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^        $onceListener = function () use ($that, &$onceListener, $event, $listener) {$/;"	v
options	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $this->options = array_merge(array($/;"	v
options	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    protected $options;$/;"	v
options	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^    public function __construct(array $options = array())$/;"	v
options	vendor/react/stream/React/Stream/ReadableStreamInterface.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array());$/;"	v
options	vendor/react/stream/React/Stream/Stream.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array())$/;"	v
options	vendor/react/stream/React/Stream/Util.php	/^    public static function pipe(ReadableStreamInterface $source, WritableStreamInterface $dest, array $options = array())$/;"	v
or	vendor/composer/ClassLoader.php	/^     * Loads the given class or interface.$/;"	c
orders	examples/Model/Order.php	/^  private static $orders = [$/;"	v
ordersBySize	examples/Model/Order.php	/^    $ordersBySize = array_filter(self::$orders, function ($order) use ($size, $limit) {$/;"	v
parseAddress	vendor/react/socket/React/Socket/Connection.php	/^    private function parseAddress($address)$/;"	f
patternPart	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^            $patternPart = $patternParts[$i];$/;"	v
patternParts	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $patternParts = explode($this->options['delimiter'], $matchPattern);$/;"	v
pause	vendor/react/stream/React/Stream/ReadableStreamInterface.php	/^    public function pause();$/;"	f
pause	vendor/react/stream/React/Stream/Stream.php	/^    public function pause()$/;"	f
periodic	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    protected function addTimerInternal($interval, $callback, $periodic = false)$/;"	v
periodic	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    public function add($interval, $callback, $periodic = false)$/;"	v
pipe	vendor/react/stream/React/Stream/ReadableStreamInterface.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array());$/;"	f
pipe	vendor/react/stream/React/Stream/Stream.php	/^    public function pipe(WritableStreamInterface $dest, array $options = array())$/;"	f
pipe	vendor/react/stream/React/Stream/Util.php	/^    public static function pipe(ReadableStreamInterface $source, WritableStreamInterface $dest, array $options = array())$/;"	f
port	lib/Polytalk/Client.php	/^      $this->port = $config['port'];$/;"	v
port	lib/Polytalk/Client.php	/^  private $port = 9090;$/;"	v
port	lib/Polytalk/Server.php	/^      $this->port = $config['port'];$/;"	v
port	lib/Polytalk/Server.php	/^  private $port = 9090;$/;"	v
pos	vendor/composer/ClassLoader.php	/^        if (false !== $pos = strrpos($class, '\\\\')) {$/;"	v
prefix	vendor/composer/ClassLoader.php	/^        foreach ($this->prefixes as $prefix => $dirs) {$/;"	v
prefixes	vendor/composer/ClassLoader.php	/^    private $prefixes = array();$/;"	v
provideMany	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function provideMany()$/;"	f
push	lib/Polytalk/Server.php	/^  public function push ($response) {$/;"	f
read	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^        $read = $this->readStreams ?: null;$/;"	v
readCallbacks	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^        $readCallbacks = &$this->readCallbacks;$/;"	v
readCallbacks	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    private $readCallbacks = array();$/;"	v
readEvents	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    private $readEvents = array();$/;"	v
readListeners	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    private $readListeners = array();$/;"	v
readStreams	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    private $readStreams = array();$/;"	v
readable	vendor/react/stream/React/Stream/Stream.php	/^        $this->readable = false;$/;"	v
readable	vendor/react/stream/React/Stream/Stream.php	/^    protected $readable = true;$/;"	v
register	vendor/composer/ClassLoader.php	/^    public function register($prepend = false)$/;"	f
removeAllListeners	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function removeAllListeners($event = null)$/;"	f
removeAllListeners	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function removeAllListeners($event = null);$/;"	f
removeCallback	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^            $removeCallback = array($this, 'removeReadStream');$/;"	v
removeCallback	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^            $removeCallback = array($this, 'removeWriteStream');$/;"	v
removeListener	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^    public function removeListener($event, $listener)$/;"	f
removeListener	vendor/evenement/evenement/src/Evenement/EventEmitterInterface.php	/^    public function removeListener($event, $listener);$/;"	f
removeReadStream	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function removeReadStream($stream)$/;"	f
removeReadStream	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function removeReadStream($stream)$/;"	f
removeReadStream	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function removeReadStream($stream);$/;"	f
removeReadStream	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function removeReadStream($stream)$/;"	f
removeStream	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function removeStream($stream)$/;"	f
removeStream	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function removeStream($stream)$/;"	f
removeStream	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function removeStream($stream);$/;"	f
removeStream	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function removeStream($stream)$/;"	f
removeStreamEvent	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    protected function removeStreamEvent($stream, $eventClass, $type)$/;"	f
removeWriteStream	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function removeWriteStream($stream)$/;"	f
removeWriteStream	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function removeWriteStream($stream)$/;"	f
removeWriteStream	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function removeWriteStream($stream);$/;"	f
removeWriteStream	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function removeWriteStream($stream)$/;"	f
request	examples/client.php	/^$request = [$/;"	v
request	lib/Polytalk/Client.php	/^    $this->request = new Request($request);$/;"	v
request	lib/Polytalk/Client.php	/^  private $request;$/;"	v
request	lib/Polytalk/Request.php	/^      $request = json_decode($request, true);$/;"	v
request	lib/Polytalk/Request.php	/^    $this->request = $request;$/;"	v
request	lib/Polytalk/Request.php	/^  private $request;$/;"	v
request	lib/Polytalk/Server.php	/^  private $request;$/;"	v
resource	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^            'resource' => $resource = event_new(),$/;"	v
response	examples/client.php	/^$response = $client->call($request);$/;"	v
response	examples/server.php	/^  $response = $server->call($request);$/;"	v
response	lib/Polytalk/Client.php	/^  private $response;$/;"	v
response	lib/Polytalk/Response.php	/^      $response = json_decode($response, true);$/;"	v
response	lib/Polytalk/Response.php	/^    $this->response = $response;$/;"	v
response	lib/Polytalk/Response.php	/^  private $response;$/;"	v
response	lib/Polytalk/Server.php	/^  private $response;$/;"	v
resume	vendor/react/stream/React/Stream/ReadableStreamInterface.php	/^    public function resume();$/;"	f
resume	vendor/react/stream/React/Stream/Stream.php	/^    public function resume()$/;"	f
run	lib/Polytalk/Server.php	/^  public function run ($callback) {$/;"	f
run	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function run()$/;"	f
run	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function run()$/;"	f
run	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function run();$/;"	f
run	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function run()$/;"	f
runStreamSelect	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    protected function runStreamSelect()$/;"	f
running	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^            $this->running = false;$/;"	v
running	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^        $this->running = false;$/;"	v
running	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^        $this->running = true;$/;"	v
running	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    private $running = false;$/;"	v
sent	vendor/react/stream/React/Stream/Buffer.php	/^        $sent = fwrite($this->stream, $this->data);$/;"	v
server	examples/server.php	/^$server = new Polytalk\\Server(['port' => 9090]);$/;"	v
setUp	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function setUp()$/;"	f
setUp	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function setUp()$/;"	f
setUseIncludePath	vendor/composer/ClassLoader.php	/^    public function setUseIncludePath($useIncludePath)$/;"	f
shutdown	vendor/react/socket/React/Socket/Server.php	/^    public function shutdown()$/;"	f
shutdown	vendor/react/socket/React/Socket/ServerInterface.php	/^    public function shutdown();$/;"	f
signature	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $signature = spl_object_hash($timer);$/;"	v
signature	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^                foreach ($timersGc as $signature => $resource) {$/;"	v
size	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $size = min(count($patternParts), count($nameParts));$/;"	v
sleepOnPendingTimers	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    protected function sleepOnPendingTimers()$/;"	f
socket	lib/Polytalk/Server.php	/^    $this->socket = new \\React\\Socket\\Server($this->loop);$/;"	v
socket	lib/Polytalk/Server.php	/^  private $socket;$/;"	v
softLimit	vendor/react/stream/React/Stream/Buffer.php	/^    public $softLimit = 2048;$/;"	v
stop	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function stop()$/;"	f
stop	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function stop()$/;"	f
stop	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function stop();$/;"	f
stop	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function stop()$/;"	f
stream	vendor/react/stream/React/Stream/Buffer.php	/^        $this->stream = $stream;$/;"	v
stream	vendor/react/stream/React/Stream/Buffer.php	/^    public $stream;$/;"	v
stream	vendor/react/stream/React/Stream/Stream.php	/^        $this->stream = $stream;$/;"	v
stream	vendor/react/stream/React/Stream/Stream.php	/^    public $stream;$/;"	v
suspended	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^            $this->suspended = false;$/;"	v
suspended	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $this->suspended = true;$/;"	v
suspended	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    private $suspended = false;$/;"	v
test	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^        $test = $this;$/;"	v
testAddListenerWithInvalidListener	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testAddListenerWithInvalidListener()$/;"	f
testAddListenerWithLambda	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testAddListenerWithLambda()$/;"	f
testAddListenerWithMethod	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testAddListenerWithMethod()$/;"	f
testAddListenerWithStaticMethod	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testAddListenerWithStaticMethod()$/;"	f
testEmitWithNoListeners	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithNoListeners()$/;"	f
testEmitWithOneArgument	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithOneArgument()$/;"	f
testEmitWithTwoArguments	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithTwoArguments()$/;"	f
testEmitWithTwoListeners	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithTwoListeners()$/;"	f
testEmitWithoutArguments	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testEmitWithoutArguments()$/;"	f
testMany	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testMany($amount)$/;"	f
testManyWithLessThanZeroTtl	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testManyWithLessThanZeroTtl()$/;"	f
testOnAny	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testOnAny()$/;"	f
testOnAnyWithEmit	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testOnAnyWithEmit()$/;"	f
testOnce	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testOnce()$/;"	f
testRemoveAllListenersMatching	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveAllListenersMatching()$/;"	f
testRemoveAllListenersNotMatching	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveAllListenersNotMatching()$/;"	f
testRemoveAllListenersWithoutArguments	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveAllListenersWithoutArguments()$/;"	f
testRemoveListenerMatching	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveListenerMatching()$/;"	f
testRemoveListenerNotMatching	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitterTest.php	/^    public function testRemoveListenerNotMatching()$/;"	f
testWildcardMatching7	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testWildcardMatching7()$/;"	f
testWildcardMatching8	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testWildcardMatching8()$/;"	f
testoffAnyWithEmit	vendor/evenement/evenement/tests/Evenement/Tests/EventEmitter2Test.php	/^    public function testoffAnyWithEmit()$/;"	f
that	vendor/evenement/evenement/src/Evenement/EventEmitter.php	/^        $that = $this;$/;"	v
that	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $that = $this;$/;"	v
that	vendor/react/socket/React/Socket/Server.php	/^        $that = $this;$/;"	v
that	vendor/react/stream/React/Stream/Stream.php	/^        $that = $this;$/;"	v
tick	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    public function tick()$/;"	f
tick	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    public function tick()$/;"	f
tick	vendor/react/event-loop/React/EventLoop/LoopInterface.php	/^    public function tick();$/;"	f
tick	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    public function tick()$/;"	f
tick	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    public function tick()$/;"	f
time	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^        $time = $this->updateTime();$/;"	v
time	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^        return $this->time = microtime(true);$/;"	v
time	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    private $time;$/;"	v
timer	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $timer = new \\libev\\TimerEvent($dummyCallback, $interval);$/;"	v
timer	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^        $timer = new \\libev\\TimerEvent($dummyCallback, $interval, $interval);$/;"	v
timer	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^            $timer = $this->timers[$signature];$/;"	v
timer	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^        $timer = (object) array($/;"	v
timer	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^            $timer = $timers->extract();$/;"	v
timer	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^        $timer = (object) array($/;"	v
timers	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    private $timers = array();$/;"	v
timers	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    private $timers = array();$/;"	v
timers	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^        $this->timers = new Timers($this);$/;"	v
timers	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    private $timers;$/;"	v
timers	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^        $this->timers = new \\SplPriorityQueue();$/;"	v
timers	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^        $timers = $this->timers;$/;"	v
timers	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    private $timers;$/;"	v
timersGc	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^        $timersGc = &$this->timersGc;$/;"	v
timersGc	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    private $timersGc = array();$/;"	v
timesListened	vendor/evenement/evenement/src/Evenement/EventEmitter2.php	/^        $timesListened = 0;$/;"	v
toArray	lib/Polytalk/Request.php	/^  public function toArray () {$/;"	f
toArray	lib/Polytalk/Response.php	/^  public function toArray () {$/;"	f
toJSON	lib/Polytalk/Request.php	/^  public function toJSON () {$/;"	f
toJSON	lib/Polytalk/Response.php	/^  public function toJSON () {$/;"	f
under	vendor/composer/ClassLoader.php	/^ * the autoloader will first look for the class under the component\/$/;"	c
unregister	vendor/composer/ClassLoader.php	/^    public function unregister()$/;"	f
updateTime	vendor/react/event-loop/React/EventLoop/Timer/Timers.php	/^    public function updateTime()$/;"	f
useIncludePath	vendor/composer/ClassLoader.php	/^        $this->useIncludePath = $useIncludePath;$/;"	v
useIncludePath	vendor/composer/ClassLoader.php	/^    private $useIncludePath = false;$/;"	v
vendorDir	vendor/composer/autoload_classmap.php	/^$vendorDir = dirname(__DIR__);$/;"	v
vendorDir	vendor/composer/autoload_namespaces.php	/^$vendorDir = dirname(__DIR__);$/;"	v
vendorDir	vendor/composer/autoload_real.php	/^        $vendorDir = dirname(__DIR__);$/;"	v
wrapStreamListener	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    private function wrapStreamListener($stream, $listener, $flags)$/;"	f
wrapTimerCallback	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    private function wrapTimerCallback($signature, $callback, $periodic)$/;"	f
writable	vendor/react/stream/React/Stream/Buffer.php	/^        $this->writable = false;$/;"	v
writable	vendor/react/stream/React/Stream/Buffer.php	/^    private $writable = true;$/;"	v
writable	vendor/react/stream/React/Stream/Stream.php	/^        $this->writable = false;$/;"	v
writable	vendor/react/stream/React/Stream/Stream.php	/^    protected $writable = true;$/;"	v
write	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^        $write = $this->writeStreams ?: null;$/;"	v
write	vendor/react/stream/React/Stream/Buffer.php	/^    public function write($data)$/;"	f
write	vendor/react/stream/React/Stream/Stream.php	/^    public function write($data)$/;"	f
write	vendor/react/stream/React/Stream/WritableStreamInterface.php	/^    public function write($data);$/;"	f
writeCallbacks	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^        $writeCallbacks = &$this->writeCallbacks;$/;"	v
writeCallbacks	vendor/react/event-loop/React/EventLoop/LibEventLoop.php	/^    private $writeCallbacks = array();$/;"	v
writeEvents	vendor/react/event-loop/React/EventLoop/LibEvLoop.php	/^    private $writeEvents = array();$/;"	v
writeListeners	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    private $writeListeners = array();$/;"	v
writeStreams	vendor/react/event-loop/React/EventLoop/StreamSelectLoop.php	/^    private $writeStreams = array();$/;"	v
